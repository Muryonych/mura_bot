import React, { useEffect, useState } from "react";
import './index.css';
import {
  LineChart, Line, XAxis, YAxis, Tooltip,
  CartesianGrid, ResponsiveContainer, BarChart, Bar
} from "recharts";
import { format } from "date-fns";

function App() {
  const [stats, setStats] = useState(null);
  const [chatTitles, setChatTitles] = useState({});
  const [dates, setDates] = useState([]);
  const [selectedDate, setSelectedDate] = useState(format(new Date(), "yyyy-MM-dd"));
  const [summary, setSummary] = useState({
    all_time: 0,
    this_month: 0,
    today: 0,
    last_hour: 0
  });

  // –ü–µ—Ä–≤–∏—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –±–µ—Å–µ–¥
  useEffect(() => {
    fetch("/api/stats")
      .then(res => res.json())
      .then(data => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤
        const allDates = Object.keys(data.graphs?.daily || {}).sort().reverse();
        setDates(allDates);
        setChatTitles(data.chat_titles || {});

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –¥–∞—Ç—É
        if (!allDates.includes(selectedDate) && allDates.length > 0) {
          setSelectedDate(allDates[0]);
        }

        // –°–≤–æ–¥–∫–∞
        if (data.stats) setSummary({
          all_time: data.stats.total || 0,
          this_month: data.stats.month || 0,
          today: data.stats.today || 0,
          last_hour: data.stats.last_hour || 0
        });
      });
  }, []);

  // –ü–æ–¥–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
  useEffect(() => {
    fetch("/api/stats")           // backend –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç query-—Å—Ç—Ä–æ–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—ë
      .then(res => res.json())
      .then(data => {
        setStats(data);
      });
  }, [selectedDate]);

  if (!stats) return <div className="p-4 text-gray-200 bg-gray-900">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  const dayStats = stats.graphs?.daily?.[selectedDate] || { hourly: {}, top_chats: [], total: 0 };

  // hourlyData –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const hourlyData = Object.entries(dayStats.hourly).map(
    ([hour, count]) => ({ hour, count })
  );

  // –¢–æ–ø —á–∞—Ç–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
  const topChats = dayStats.top_chats.map(
    ([id, count]) => ({
      id,
      count,
      title: chatTitles[id]?.title || `–ß–∞—Ç ${id}`
    })
  );

  return (
    <div className="App bg-gray-900 text-white min-h-screen p-4">
      <h1 className="text-3xl font-bold mb-6">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π</h1>

      {/* –°–≤–æ–¥–∫–∞ */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        <div className="bg-gray-800 p-4 rounded shadow">
          <div className="text-sm">üß† –í—Å–µ–≥–æ</div>
          <div className="text-2xl font-semibold">{summary.all_time}</div>
        </div>
        <div className="bg-gray-800 p-4 rounded shadow">
          <div className="text-sm">üìÖ –ó–∞ –º–µ—Å—è—Ü</div>
          <div className="text-2xl font-semibold">{summary.this_month}</div>
        </div>
        <div className="bg-gray-800 p-4 rounded shadow">
          <div className="text-sm">üìÜ –°–µ–≥–æ–¥–Ω—è</div>
          <div className="text-2xl font-semibold">{summary.today}</div>
        </div>
        <div className="bg-gray-800 p-4 rounded shadow">
          <div className="text-sm">‚è± –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å</div>
          <div className="text-2xl font-semibold">{summary.last_hour}</div>
        </div>
      </div>

      <div className="flex flex-col md:flex-row gap-6">
        {/* –í—ã–±–æ—Ä –¥–∞—Ç—ã */}
        <aside className="w-full md:w-60">
          <h2 className="text-lg font-semibold mb-2">üìÖ –î–∞—Ç—ã</h2>
          <ul>
            {dates.map(date => (
              <li
                key={date}
                onClick={() => setSelectedDate(date)}
                className={`cursor-pointer p-2 rounded mb-1 transition ${
                  selectedDate === date ? "bg-blue-600 text-white" : "hover:bg-gray-700"
                }`}
              >
                {date}
              </li>
            ))}
          </ul>
        </aside>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å */}
        <main className="flex-1">
          <h2 className="text-2xl font-semibold mb-4">üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {selectedDate}</h2>
          <p className="mb-4">üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å: {dayStats.total}</p>

          {/* –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å–∞–º */}
          <section className="mb-8">
            <h3 className="text-lg mb-2">‚è∞ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å–∞–º</h3>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={hourlyData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#444" />
                <XAxis dataKey="hour" stroke="#ccc" />
                <YAxis allowDecimals={false} stroke="#ccc" />
                <Tooltip formatter={(value, name) => [`${value}`, name === 'count' ? '–°–æ–æ–±—â–µ–Ω–∏–π' : name]}/>
                <Line type="monotone" dataKey="count" stroke="#60a5fa" strokeWidth={2} />
              </LineChart>
            </ResponsiveContainer>
          </section>

          {/* –¢–æ–ø —á–∞—Ç–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ */}
          <section>
            <h3 className="text-lg mb-2">üí¨ –¢–æ–ø —á–∞—Ç–æ–≤</h3>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={topChats}>
                <CartesianGrid strokeDasharray="3 3" stroke="#444" />
                <XAxis dataKey="title" stroke="#ccc" />
                <YAxis allowDecimals={false} stroke="#ccc" />
                <Tooltip formatter={(value, name) => [`${value}`, name === 'count' ? '–°–æ–æ–±—â–µ–Ω–∏–π' : name]}
      contentStyle={{ backgroundColor: 'rgba(255, 255, 255, 0.9)', border: 'none', borderRadius: 4 }}
      labelStyle={{ color: '#000000', fontWeight: 'bold', fontSize: 12 }}
      itemStyle={{ color: '#000000', fontSize: 14 }}/>
                <Bar dataKey="count" fill="#34d399" />
              </BarChart>
            </ResponsiveContainer>
          </section>
        </main>
      </div>
    </div>
  );
}

export default App;
