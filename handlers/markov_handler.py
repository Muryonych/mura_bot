import random
import requests
from bs4 import BeautifulSoup
from datetime import datetime
from vkbottle.bot import Message, BotLabeler
from utils.reply_filter import should_reply
from utils.markov import generate_message, save_message, load_messages  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é load_messages
from utils.chat_stats import record_chat_message
from utils.chat_settings import get_chat_setting
from handlers.reputation_handler import update_reputation  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ

labeler = BotLabeler()
labeler.vbml_ignore_case = True


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def can_send_message(peer_id: int, time_limit=10):
    messages = load_messages(peer_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥—ã
    if not messages:
        return True  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ messages - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    if isinstance(messages, list) and isinstance(messages[-1], dict):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message = messages[-1]
        last_timestamp = last_message.get("timestamp")
        if last_timestamp is None:
            return True  # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

        last_time = datetime.fromisoformat(last_timestamp)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        time_diff = datetime.utcnow() - last_time
        if time_diff.total_seconds() < time_limit:
            print(f"[TIMEOUT] –î–ª—è –±–µ—Å–µ–¥—ã {peer_id} –Ω–µ –ø—Ä–æ—à–ª–æ 10 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return False  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ, —á–µ–º time_limit, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    return True  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å


@labeler.message(text=["–º—É—Ä–∞ –ø–∏–Ω–≥", "–ú—É—Ä–∞ –ø–∏–Ω–≥", "–ú–£–†–ê –ü–ò–ù–ì"])
async def ping_command(message: Message):
    await message.answer("–ü–æ–Ω–≥")


@labeler.message(text=["–º—É—Ä–∞ –∞–Ω–µ–∫–¥–æ—Ç", "–ú—É—Ä–∞ –∞–Ω–µ–∫–¥–æ—Ç", "–ú–£–†–ê –ê–ù–ï–ö–î–û–¢"])
async def joke_command(message: Message):
    url = "https://www.anekdot.ru/random/anekdot/"
    try:
        resp = requests.get(url)
        resp.raise_for_status()
        soup = BeautifulSoup(resp.text, "html.parser")
        tag = soup.find("div", class_="text")
        if not tag or not tag.text.strip():
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç üò¢")
            return
        joke = tag.text.strip()
        await message.answer(joke)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞.")


@labeler.message()
async def markov_listener(message: Message):
    # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –≤ –õ–°
    if message.peer_id < 2000000000:
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤
    if message.from_id < 0:
        return

    lower_text = (message.text or "").lower()
    if lower_text.startswith(("–º—É—Ä–∞ –º–µ–º", "–º—É—Ä–∞ –ø–∏–Ω–≥", "–º—É—Ä–∞ –∞–Ω–µ–∫–¥–æ—Ç", "–º—É—Ä–∞ —à–∞–Ω—Å")):
        return

    if message.text:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if not can_send_message(message.peer_id, time_limit=10):
            await message.answer("–ü–æ–¥–æ–∂–¥–∏ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
        await update_reputation(message.peer_id, message.from_id, message.text, message.ctx_api)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ messages.json
        save_message(peer_id=message.peer_id, message_text=message.text)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            chat_title = None
            if hasattr(message, "chat") and message.chat and getattr(message.chat, "title", None):
                chat_title = message.chat.title

            record_chat_message(
                peer_id=str(message.peer_id),
                timestamp=datetime.utcnow(),
                chat_title=chat_title
            )
            print(f"[STATS] –û–±–Ω–æ–≤–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è {message.peer_id}: {message.text}")
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

        # –ü–æ–ª—É—á–∞–µ–º —à–∞–Ω—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100%)
        chance = get_chat_setting(str(message.peer_id), "mura_chance")
        if chance is None:
            chance = 50

        if random.randint(1, 100) <= chance:
            reply = generate_message(peer_id=message.peer_id)
            if reply:
                await message.answer(reply)
